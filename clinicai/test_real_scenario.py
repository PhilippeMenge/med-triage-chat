#!/usr/bin/env python3
"""
Teste do cen√°rio real onde a primeira pergunta se repete.
"""

import asyncio
from clinicai_mongodb_fixed import TriageProcessor, connect_mongodb, hash_phone_number

async def test_real_repetition_scenario():
    """Testa o cen√°rio real onde pode haver repeti√ß√£o."""
    
    print("üéØ TESTE: Cen√°rio Real de Repeti√ß√£o da Primeira Pergunta")
    print("=" * 70)
    
    await connect_mongodb()
    processor = TriageProcessor()
    test_phone = "+5511777777777"
    phone_hash = hash_phone_number(test_phone.replace("+", ""))
    
    # Limpar dados
    try:
        from clinicai_mongodb_fixed import mongo_db
        if mongo_db is not None:
            await mongo_db.messages.delete_many({"phone_hash": phone_hash})
            await mongo_db.triages.delete_many({"phone_hash": phone_hash})
    except:
        pass
    
    print("\nüì± SIMULA√á√ÉO COMPLETA DE CONVERSA")
    print("="*70)
    
    # Simular exatamente o que acontece no WhatsApp
    messages_sent = []
    
    # 1. Primeira mensagem do usu√°rio
    print("\n1Ô∏è‚É£ Usu√°rio envia: 'Oi'")
    result1 = await processor.process_message(test_phone, "Oi")
    
    # Capturar hist√≥rico ap√≥s primeira mensagem
    history1 = processor.conversation_histories.get(phone_hash, [])
    print(f"üìö Hist√≥rico ap√≥s 1¬™ intera√ß√£o ({len(history1)} mensagens):")
    for i, msg in enumerate(history1, 1):
        print(f"   {i}. {msg}")
        messages_sent.append(msg)
    
    # 2. Segunda mensagem - resposta do usu√°rio
    print(f"\n2Ô∏è‚É£ Usu√°rio responde: 'Estou com dor de cabe√ßa'")
    result2 = await processor.process_message(test_phone, "Estou com dor de cabe√ßa")
    
    # Capturar hist√≥rico ap√≥s segunda mensagem
    history2 = processor.conversation_histories.get(phone_hash, [])
    print(f"üìö Hist√≥rico ap√≥s 2¬™ intera√ß√£o ({len(history2)} mensagens):")
    for i, msg in enumerate(history2, 1):
        print(f"   {i}. {msg}")
        if msg not in messages_sent:
            messages_sent.append(msg)
    
    # 3. Terceira mensagem - continua√ß√£o
    print(f"\n3Ô∏è‚É£ Usu√°rio continua: '√â uma dor forte'")
    result3 = await processor.process_message(test_phone, "√â uma dor forte")
    
    # Capturar hist√≥rico ap√≥s terceira mensagem
    history3 = processor.conversation_histories.get(phone_hash, [])
    print(f"üìö Hist√≥rico ap√≥s 3¬™ intera√ß√£o ({len(history3)} mensagens):")
    for i, msg in enumerate(history3, 1):
        print(f"   {i}. {msg}")
        if msg not in messages_sent:
            messages_sent.append(msg)
    
    print(f"\n" + "="*70)
    print("üîç AN√ÅLISE DE REPETI√á√ïES")
    print("="*70)
    
    # Analisar todas as mensagens enviadas pelo sistema
    system_messages = [msg for msg in messages_sent if msg.startswith("ClinicAI:")]
    
    print(f"üì§ MENSAGENS ENVIADAS PELO SISTEMA ({len(system_messages)}):")
    for i, msg in enumerate(system_messages, 1):
        print(f"   {i}. {msg}")
    
    # Procurar por perguntas sobre motivo/queixa
    first_questions = []
    for i, msg in enumerate(system_messages, 1):
        msg_lower = msg.lower()
        if any(word in msg_lower for word in ["motivo", "queixa", "contato", "trouxe", "qual √©"]):
            first_questions.append((i, msg))
    
    print(f"\n‚ùì PERGUNTAS SOBRE MOTIVO/QUEIXA ({len(first_questions)}):")
    for pos, msg in first_questions:
        print(f"   Posi√ß√£o {pos}: {msg}")
    
    # Verificar repeti√ß√µes
    if len(first_questions) > 1:
        print(f"\n‚ùå PROBLEMA DETECTADO!")
        print(f"   üîÑ {len(first_questions)} perguntas sobre motivo encontradas")
        print(f"   üìç Isso indica repeti√ß√£o da primeira pergunta")
        
        # Mostrar diferen√ßas
        for i, (pos, msg) in enumerate(first_questions):
            print(f"\n   Pergunta {i+1} (posi√ß√£o {pos}):")
            print(f"   {msg}")
    else:
        print(f"\n‚úÖ NENHUMA REPETI√á√ÉO DETECTADA!")
        if first_questions:
            print(f"   ‚úÖ Apenas 1 pergunta sobre motivo encontrada")
        else:
            print(f"   ‚ö†Ô∏è Nenhuma pergunta sobre motivo encontrada (pode ser problema)")
    
    # Verificar mensagens de boas-vindas
    welcome_messages = [msg for msg in system_messages if "Ol√°! Sou a ClinicAI" in msg]
    print(f"\nüè• MENSAGENS DE BOAS-VINDAS: {len(welcome_messages)}")
    
    if len(welcome_messages) > 1:
        print(f"   ‚ö†Ô∏è M√∫ltiplas mensagens de boas-vindas detectadas")
    
    # Verificar mensagens no MongoDB
    print(f"\nüíæ VERIFICA√á√ÉO NO MONGODB:")
    try:
        if mongo_db is not None:
            messages = await mongo_db.messages.find({"phone_hash": phone_hash}).to_list(length=50)
            out_messages = [msg for msg in messages if msg['direction'] == 'out']
            
            print(f"   üì§ Mensagens 'out' no MongoDB: {len(out_messages)}")
            for i, msg in enumerate(out_messages, 1):
                print(f"      {i}. {msg['text'][:80]}...")
            
            # Contar perguntas no MongoDB
            mongo_first_questions = 0
            for msg in out_messages:
                text_lower = msg['text'].lower()
                if any(word in text_lower for word in ["motivo", "queixa", "contato", "trouxe", "qual √©"]):
                    mongo_first_questions += 1
            
            print(f"   ‚ùì Perguntas sobre motivo no MongoDB: {mongo_first_questions}")
            
            if mongo_first_questions > 1:
                print(f"   ‚ùå REPETI√á√ÉO CONFIRMADA NO MONGODB!")
            else:
                print(f"   ‚úÖ Sem repeti√ß√µes no MongoDB")
                
    except Exception as e:
        print(f"   ‚ùå Erro ao verificar MongoDB: {e}")
    
    # Limpar dados
    try:
        if mongo_db is not None:
            await mongo_db.messages.delete_many({"phone_hash": phone_hash})
            await mongo_db.triages.delete_many({"phone_hash": phone_hash})
    except:
        pass

if __name__ == "__main__":
    print("üöÄ INICIANDO TESTE DE CEN√ÅRIO REAL")
    
    asyncio.run(test_real_repetition_scenario())
    
    print(f"\nüéâ TESTE CONCLU√çDO!")
    print("‚úÖ An√°lise completa do cen√°rio real realizada")
